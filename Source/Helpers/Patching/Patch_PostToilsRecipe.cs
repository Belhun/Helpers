using HarmonyLib;
using RimWorld;
using System.Collections.Generic;
using System.Reflection;
using Verse;
using Verse.AI;

namespace Helpers
{
    [HarmonyPatch]
    public static class Patch_DoRecipeWork_Postfix
    {
        static MethodBase TargetMethod()
        {
            // Locate the nested class and method generated by the compiler
            var nestedType = typeof(Toils_Recipe).GetNestedType("<>c__DisplayClass2_0", BindingFlags.NonPublic);
            return nestedType?.GetMethod("<DoRecipeWork>b__1", BindingFlags.Instance | BindingFlags.NonPublic);
        }

        public static void Postfix(object __instance)
        {
            // Retrieve the `toil` object
            var toilField = __instance.GetType().GetField("toil", BindingFlags.Instance | BindingFlags.NonPublic);
            var toil = toilField?.GetValue(__instance) as Toil;
            if (toil == null)
            {
                Log.Warning("Postfix: Failed to retrieve `toil`.");
                return;
            }

            // Get the actor (main pawn performing the job)
            var actor = toil.actor;
            if (actor == null)
            {
                Log.Warning("Postfix: Actor is null.");
                return;
            }

            // Retrieve the current job and job driver
            var curJob = actor.jobs?.curJob;
            var jobDriver = actor.jobs?.curDriver as JobDriver_DoBill;
            if (curJob == null || jobDriver == null)
            {
                Log.Warning("Postfix: Failed to retrieve current job or job driver.");
                return;
            }

            // Get the helper component
            var helperComp = actor.GetHelperComponent();
            if (helperComp == null || !helperComp.IsBeingHelped)
            {
                // No helpers active, nothing to adjust
                return;
            }

            // Adjust workLeft using the helper contribution
            float helperContribution = HelperMechanics.CalculateHelperContribution(
                actor,
                jobDriver,
                curJob.RecipeDef,
                helperComp.CurrentHelpers,
                curJob.RecipeDef.workSpeedStat
            );

            jobDriver.workLeft -= helperContribution;

            DebugHelpers.DebugLog("Patch_DoRecipeWork_Postfix", $" Adjusted workLeft by {helperContribution}. Remaining work: {jobDriver.workLeft}");

            // Log experience updates handled within HelperMechanics (if applicable)
            foreach (var helper in helperComp.CurrentHelpers)
            {
                DebugHelpers.DebugLog("Patch_DoRecipeWork_Postfix", ": {helper.Name} assisted {actor.Name} and contributed.");
            }
        }

    }

}

